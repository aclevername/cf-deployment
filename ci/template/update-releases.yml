#@ load("@ytt:data", "data")
#@ load("helpers.lib.yml",
#@   "manage_gcp_dns",
#@   "delete_deployment",
#@   "bosh_clean_up",
#@ )

---
groups:
- name: update-base-stemcells-and-releases
  jobs:
  - update-stemcell-and-recompile-releases
  #@ for r in data.values.baseReleases:
  - #@ "update-" + r.name
  #@ end
- name: update-ops-releases
  jobs:
  #@ for r in data.values.opsReleases:
  - #@ "update-" + r.name
  #@ end
- name: update-windows-stemcells-and-releases
  jobs:
  #@ for s in data.values.windowsVersSupported:
  - #@ "update-" + s.name + "-stemcell"
  #@ end
  - update-windows-2016-offline-releases

- name: infrastructure
  jobs:
  - setup-infrastructure-compilation
  - destroy-infrastructure-compilation
  - run-bosh-cleanup-compilation

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: cf-deployment-develop
  type: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((cf_deployment_readwrite_deploy_key.private_key))
    ignore_paths:
    - ci/**
    - .envrc
- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git
- name: relint-envs
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/relint-envs.git
    private_key: ((hagrid_env_readwrite_deploy_key.private_key))
- name: runtime-ci
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git
- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent
- name: windows2016fs-offline-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: windows2016fs-release
    access_token: ((release_integration_download_bot_access_token))
#@ for r in data.values.baseReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository
#@ end
#@ for r in data.values.opsReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository
#@ end
#@ for r in data.values.baseReleases:
- name: #@ r.name + "-release-gcs"
  type: gcs-resource
  source:
    bucket: cf-deployment-compiled-releases
    json_key: ((concourse_gcp_service_account_json))
    regexp: #@ r.name + "-[^-]+-ubuntu-trusty-[^-]+-(\d+)-(\d+)-(\d+).*\.tgz"
#@ end
#@ for s in data.values.windowsVersSupported:
- name: #@ s.name + "-stemcell"
  type: bosh-io-stemcell
  source:
    name: #@ "bosh-google-kvm-" + s.name + "-go_agent"
#@ end
- name: daily
  type: time
  source:
    start: 3:00 -0700
    stop: 3:30 -0700
    interval: 24h

jobs:
#@ for r in data.values.baseReleases:
- name: #@ "update-" + r.name
  serial_groups:
  - stemcell
  - #@ "update-" + r.name
  public: true
  plan:
  - aggregate:
    - get: runtime-ci
    - get: cf-deployment-develop
    - get: cf-deployment-concourse-tasks
    - get: relint-envs
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
    - get: stemcell
      params:
        tarball: false
  - task: #@ "update-release-" + r.name
    file: runtime-ci/tasks/update-single-manifest-release/task.yml
    input_mapping:
      release: #@ r.name + "-release"
      deployment-configuration: cf-deployment-develop
    params:
      RELEASE_NAME: #@ r.name
  #@ if r.name.count("buildpack")==0:
  - task: bosh-dry-run
    file: runtime-ci/tasks/bosh-dry-run-with-ops/task.yml
    input_mapping:
      bbl-state: relint-envs
      cf-deployment: updated-deployment-manifest
      ops-files: cf-deployment-develop
      #@ if hasattr(r, "varsFilesInput"):
      vars-files: #@ r.varsFilesInput
      #@ else:
      vars-files: relint-envs
      #@ end
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      DEPLOYMENT_NAME_SUFFIX: #@ r.name
      SYSTEM_DOMAIN: greengrass.cf-app.com
  - #@ delete_deployment("greengrass", deployment="cf-dry-run-" + r.name)
  #@ end
  - task: compile-release
    file: runtime-ci/tasks/compile-release-from-manifest/task.yml
    input_mapping:
      bbl-state: relint-envs
      manifest: updated-deployment-manifest
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      RELEASE_NAME: #@ r.name
  - task: #@ "update-additional-ops-files-" + r.name
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      release: #@ r.name + "-release"
      original-ops-file: cf-deployment-develop
    params:
      RELEASE_NAME: #@ r.name
  - task: update-compiled-release-ops
    file: runtime-ci/tasks/update-single-compiled-release/task.yml
    input_mapping:
      original-compiled-releases-ops-file: cf-deployment-develop
      release: #@ r.name + "-release"
      compiled-release-tarball: exported-release
      current-commit-message: commit-message
    params:
      RELEASE_NAME: #@ r.name
      ORIGINAL_OPS_FILE_PATH: operations/use-compiled-releases.yml
      UPDATED_OPS_FILE_PATH: operations/use-compiled-releases.yml
  - task: combine-inputs
    file: runtime-ci/tasks/combine-inputs/task.yml
    input_mapping:
      first-input: updated-compiled-releases-ops-file
      second-input: updated-ops-file
  - put: #@ r.name + "-release-gcs"
    params:
      file: exported-release/*.tgz
      predefined_acl: publicRead
  - task: commit-generated-manifest-and-ops
    file: runtime-ci/tasks/commit-generated-manifest/task.yml
    input_mapping:
      repo: cf-deployment-develop
      ops-file: combined-inputs
      manifest: updated-deployment-manifest
    params:
      MANIFEST_NAME: cf-deployment.yml
      MANIFEST_DESTINATION: cf-deployment.yml
      COMMIT_ALL_OPS_FILES: true
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-repo
#@ end

#@ for r in data.values.opsReleases:
- name: #@ "update-" + r.name
  serial: true
  public: true
  plan:
  - aggregate:
    - get: runtime-ci
    - get: cf-deployment-develop
    - get: cf-deployment-concourse-tasks
    - get: relint-envs
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
    - get: stemcell
      params:
        tarball: false
      passed: [ update-stemcell-and-recompile-releases ]
  - task: #@ "update-release-" + r.name
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      release: #@ r.name + "-release"
      original-ops-file: cf-deployment-develop
    params:
      RELEASE_NAME: #@ r.name
  - task: bosh-upload-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcells/task.yml
    input_mapping:
      bbl-state: relint-envs
      cf-deployment: cf-deployment-develop
      ops-files: cf-deployment-develop
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      INFRASTRUCTURE: google
      OPS_FILES: |
        operations/windows2012R2-cell.yml
        operations/windows2016-cell.yml
        operations/windows1803-cell.yml
        operations/windows2019-cell.yml
  - task: #@ "bosh-dry-run-" + r.name
    file: runtime-ci/tasks/bosh-dry-run-with-all-ops/task.yml
    input_mapping:
      bbl-state: relint-envs
      cf-deployment: cf-deployment-develop
      ops-files: updated-ops-file
      #@ if hasattr(r, "varsFilesInput"):
      vars-files: #@ r.varsFilesInput
      #@ else:
      vars-files: relint-envs
      #@ end
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      DEPLOYMENT_NAME_SUFFIX: #@ r.name
      SYSTEM_DOMAIN: greengrass.cf-app.com
      #@ if/end hasattr(r, "varsFiles"):
      VARS_FILES: #@ r.varsFiles
  - task: #@ "commit-generated-manifest-and-ops-" + r.name
    file: runtime-ci/tasks/commit-generated-manifest/task.yml
    input_mapping:
      repo: cf-deployment-develop
      ops-file: updated-ops-file
      manifest: cf-deployment-develop
    params:
      COMMIT_ALL_OPS_FILES: true
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-repo
#@ end

#@ for s in data.values.windowsVersSupported:
- name: #@ "update-" + s.name + "-stemcell"
  public: true
  plan:
  - aggregate:
    - get: runtime-ci
    - get: cf-deployment-develop
    - get: #@ s.name + "-stemcell"
      trigger: true
      params:
        tarball: false
  - task: update-windows-stemcell-ops
    file: runtime-ci/tasks/update-windows-stemcell-ops/task.yml
    input_mapping:
      ops-files: cf-deployment-develop
      windows-stemcell: #@ s.name + "-stemcell"
    params:
      ORIGINAL_WINDOWS_OPS_FILE_PATH: #@ "{}/{}".format(s.opsFileDir, s.opsFile)
      UPDATED_WINDOWS_OPS_FILE_PATH: #@ s.opsFile
  - task: commit-generated-manifest-and-ops
    file: runtime-ci/tasks/commit-generated-manifest/task.yml
    input_mapping:
      repo: cf-deployment-develop
      ops-file: updated-stemcell-ops-file
      manifest: cf-deployment-develop
    params:
      OPS_FILE_NAME: #@ s.opsFile
      OPS_FILE_DESTINATION: #@ "{}/{}".format(s.opsFileDir, s.opsFile)
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-repo
#@ end

- name: update-stemcell-and-recompile-releases
  public: true
  serial_groups:
  - stemcell
  #@ for r in data.values.baseReleases:
  - #@ "update-" + r.name
  #@ end
  plan:
  - aggregate:
    - get: runtime-ci
    - get: relint-envs
    - get: cf-deployment-develop
    - get: cf-deployment-concourse-tasks
    #@ for s in data.values.baseReleases:
    - get: #@ s.name + "-release"
      params:
        tarball: false
    #@ end
    - get: stemcell
      trigger: true
      params:
        tarball: false
  - task: update-stemcell-manifest-section
    file: runtime-ci/tasks/update-stemcell-manifest-section/task.yml
    input_mapping:
      deployment-configuration: cf-deployment-develop
  - task: upload-updated-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcells/task.yml
    input_mapping:
      bbl-state: relint-envs
      cf-deployment: updated-deployment-manifest
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      INFRASTRUCTURE: google
  - aggregate:
    #@ for s in data.values.baseReleases:
    - task: #@ "compile-release-" + s.name
      file: runtime-ci/tasks/compile-release-from-manifest/task.yml
      input_mapping:
        bbl-state: relint-envs
        manifest: updated-deployment-manifest
      output_mapping:
        exported-release: #@ "exported-release-" + s.name
      params:
        BBL_STATE_DIR: environments/test/greengrass/bbl-state
        RELEASE_NAME: #@ s.name
    #@ end
  #@ for s in data.values.baseReleases:
  - task: #@ "update-compiled-releases-ops-" + s.name
    file: runtime-ci/tasks/update-single-compiled-release/task.yml
    input_mapping:
      #@ if hasattr(s, "bootstrap"):
      original-compiled-releases-ops-file: cf-deployment-develop
      #@ else:
      original-compiled-releases-ops-file: updated-compiled-releases-ops-file
      #@ end
      release: #@ s.name + "-release"
      compiled-release-tarball: #@ "exported-release-" + s.name
      current-commit-message: commit-message
    params:
      RELEASE_NAME: #@ s.name
      #@ if hasattr(s, "bootstrap"):
      ORIGINAL_OPS_FILE_PATH: operations/use-compiled-releases.yml
      #@ else:
      ORIGINAL_OPS_FILE_PATH: use-compiled-releases.yml
      #@ end
      UPDATED_OPS_FILE_PATH: use-compiled-releases.yml
  #@ end
  - aggregate:
    #@ for s in data.values.baseReleases:
    - put: #@ s.name + "-release-gcs"
      params:
        file: #@ "exported-release-" + s.name + "/*.tgz"
        predefined_acl: publicRead
    #@ end
  - task: commit-generated-manifest-and-ops
    file: runtime-ci/tasks/commit-generated-manifest/task.yml
    input_mapping:
      repo: cf-deployment-develop
      ops-file: updated-compiled-releases-ops-file
      manifest: updated-deployment-manifest
    params:
      MANIFEST_NAME: cf-deployment.yml
      MANIFEST_DESTINATION: cf-deployment.yml
      OPS_FILE_NAME: use-compiled-releases.yml
      OPS_FILE_DESTINATION: operations/use-compiled-releases.yml
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-repo

- name: update-windows-2016-offline-releases
  serial: true
  public: true
  plan:
  - aggregate:
    - get: runtime-ci
    - get: relint-envs
    - get: cf-deployment-develop
    - get: cf-deployment-concourse-tasks
      params:
        tarball: false
    - get: windows2016fs-offline-release
      trigger: true
      params:
        tarball: false
    - get: windows2016-stemcell
  - task: update-windows-releases
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      original-ops-file: cf-deployment-develop
      release: windows2016fs-offline-release
    params:
      RELEASE_NAME: windows2016fs
      ORIGINAL_OPS_FILE_PATH: operations/use-offline-windows2016fs.yml
      UPDATED_OPS_FILE_PATH: use-offline-windows2016fs.yml
  - task: commit-generated-manifest-and-ops
    file: runtime-ci/tasks/commit-generated-manifest/task.yml
    input_mapping:
      repo: cf-deployment-develop
      ops-file: updated-ops-file
      manifest: cf-deployment-develop
    params:
      OPS_FILE_DESTINATION: operations/use-offline-windows2016fs.yml
      OPS_FILE_NAME: use-offline-windows2016fs.yml
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-repo

- name: setup-infrastructure-compilation
  serial: true
  public: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      BBL_CONFIG_DIR: environments/test/greengrass/bbl-config
      BBL_IAAS: gcp
      BBL_GCP_SERVICE_ACCOUNT_KEY: environments/test/greengrass/google_account_creds.json
      BBL_GCP_REGION: us-central1
      BBL_LB_CERT: ((greengrass_cf_lb_cert.certificate))
      BBL_LB_KEY: ((greengrass_cf_lb_cert.private_key))
      LB_DOMAIN: greengrass.cf-app.com
      BBL_ENV_NAME: greengrass-compile
    input_mapping:
      bbl-state: relint-envs
      bbl-config: relint-envs
    ensure:
      put: relint-envs
      params:
        repository: updated-bbl-state
        rebase: true
  - task: extend-cloud-config-for-credhub-dry-run
    file: runtime-ci/tasks/bosh-extend-cloud-config/task.yml
    input_mapping:
      ops-file: relint-envs
      bbl-state: relint-envs
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      OPS_FILE_PATH: environments/test/greengrass/add-credhub-lb.yml

- name: destroy-infrastructure-compilation
  serial: true
  public: true
  plan:
  - aggregate:
    - get: relint-envs
    - get: runtime-ci
    - get: cf-deployment-concourse-tasks
  - #@ delete_deployment("greengrass")
  - task: destroy-infrastructure
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    input_mapping:
      bbl-state: relint-envs
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      BBL_GCP_SERVICE_ACCOUNT_KEY: environments/test/greengrass/google_account_creds.json
    ensure:
      put: relint-envs
      params:
        repository: updated-bbl-state
        rebase: true

- name: run-bosh-cleanup-compilation
  serial: true
  public: true
  plan:
  - timeout: 4h
    do:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment-develop
      - get: relint-envs
      - get: daily
        trigger: true
    - #@ bosh_clean_up("greengrass")
    - task: upload-stemcell
      file: cf-deployment-concourse-tasks/bosh-upload-stemcells/task.yml
      input_mapping:
        bbl-state: relint-envs
        cf-deployment: cf-deployment-develop
        ops-files: cf-deployment-develop
      params:
        BBL_STATE_DIR: environments/test/greengrass/bbl-state
        INFRASTRUCTURE: google
        OPS_FILES: |
          operations/windows2012R2-cell.yml
          operations/windows2016-cell.yml
          operations/windows1803-cell.yml
          operations/windows2019-cell.yml
    - task: upload-bosh-dns-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
            tag: latest
        inputs:
        - name: relint-envs
        run:
          path: /bin/bash
          args:
          - -c
          - |
            #!/bin/bash
            cd relint-envs/environments/test/greengrass/bbl-state
            eval "$(bbl print-env)"
            bosh upload-release $(bosh int <(bosh runtime-config --name=dns) --path /releases/name=bosh-dns/url)
